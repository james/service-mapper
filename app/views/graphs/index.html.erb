<style type="text/css">
#graph {
  border:1px solid #777;
}

#story_panel li {
  padding:1px 0;
}

#story_panel li:hover {
  padding:0 0;
  background-color:#eee;
  border:1px solid #f77;
  border-left: none;
  border-right:none;
  cursor: default;
}

.node.fixed circle{
  stroke: red;
}

marker#story_stage {
  fill: black;
}

marker#story_stage_hilighted {
  fill: red;
}

line.story_stage {
  stroke-width: 2px;
  stroke: black;
}

line.system_link {
  stroke-width: 10px;
  stroke: green;
}

.system circle {
  fill: blue;
}

.person circle {
  fill: black;
}
</style>

<div class="row">
  <div class="span9">
    <div id="graph"></div>
  </div>
  <div class="span3" id="sidebar">
    <p><input type="checkbox" id="hide_stories" /> Hide story stages</p>
    <hr />
    <% if @story %>
      <div id="story_panel">
        <p><%= @story.name %></p>
        <ol>
          <% @story.story_stages.ordered.each do |story_stage| %>
            <li id="story_stage_<%= story_stage.id %>_desc" class="story_stage_desc"><%= story_stage.description %></li>
          <% end %>
        </ol>
      </div>
      <hr />
    <% end %>
    <div id="info_panel"></div>
  </div>
</div>
<script src="/assets/d3.min.js"></script>
<script>

var width = 870,
    height = 600,
    circle_radius = 10;

var color = d3.scale.category20();

var force = d3.layout.force()
    .charge(-250)
    .gravity(0.06)
    .linkDistance(100)
    .size([width, height]);

var svg = d3.select("#graph").append("svg")
    .attr("width", width)
    .attr("height", height);

svg.append("defs").selectAll("marker")
    .data(["story_stage", "story_stage_hilighted"])
  .enter().append("marker")
    .attr("id", function(d) { return d; })
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("path")
    .attr("d", "M0,-5L10,0L0,5")


d3.json("/graphs/index.json" + window.location.search, function(error, graph) {
  var edges = [];

  graph.links.forEach(function(e) { 
      // Get the source and target nodes
      var sourceNode = graph.nodes.filter(function(n) { return n.id === e.source; })[0],
          targetNode = graph.nodes.filter(function(n) { return n.id === e.target; })[0];

      // Add the edge to the array
      edges.push({source: sourceNode, target: targetNode, type: e.type, id: e.id, url: e.url});
  });

  force
      .nodes(graph.nodes)
      .links(edges)
      .start();

  var drag = force.drag()
      .on("dragstart", dragstart);

  var link = svg.selectAll(".link")
      .data(edges)
    .enter().append("line")
      .attr("marker-end", function(d) { return "url(#" + d.type + ")"; })
      .attr("class", function(d) { return d.type })
      .attr("id", function(d) { return d.type + "_" + d.id })
      .on("click", update_info_panel_for_link)

  var node = svg.selectAll(".node")
      .data(graph.nodes)
    .enter().append("g")
      .attr("class", function(d) { return d.type + " node" })
      .call(drag)
      .on("dblclick", dblclick)

  node.append("circle")
      .attr("r", circle_radius)
      .on("click", update_info_panel_for_node)

  node.append("text")
      .attr("dx", 12)
      .attr("dy", ".35em")
      .text(function(d) { return d.name; });

  force.on("tick", function() {
    link.attr("x1", function(d) { return within_bounds(d.source.x, width); })
        .attr("y1", function(d) { return within_bounds(d.source.y, height); })
        .attr("x2", function(d) { return within_bounds(d.target.x, width); })
        .attr("y2", function(d) { return within_bounds(d.target.y, height); });

    node.attr("transform", function(d) { return "translate(" + within_bounds(d.x, width) + "," + within_bounds(d.y, height) + ")"; });
  });
});

var update_info_panel_for_node = function(e) {
  $.ajax({
    url: e.url,
    error: function(xhr_data) {
      $("#info_panel").html("ERROR")
    },
    success: function(response) {
      $("#info_panel").html(response);
    }
  });
}

var update_info_panel_for_link = function(e) {
  $("#info_panel").html(e.type);
}

var within_bounds = function(i, within) {
  return Math.max(circle_radius, Math.min(within - circle_radius, i))
}

function dblclick(d) {
  d3.select(this).classed("fixed", d.fixed = false);
}

function dragstart(d) {
  d3.select(this).classed("fixed", d.fixed = true);
}

$(".story_stage_desc").hover(function(e) {
  var arrow_id = $(e.target).attr("id").replace("_desc", "")
  var el = $("#" + arrow_id)
  if(e.type == "mouseleave") {
    el.css("stroke", "black")
    el.attr("marker-end", "url(#story_stage)")
    if($("#hide_stories").is(':checked')) {
      el.hide()
    }
  } else {
    var last_line = el.parent().find("line:last")
    el.insertAfter(last_line)
    el.css("stroke", "red")
    el.attr("marker-end", "url(#story_stage_hilighted)")
    if($("#hide_stories").is(':checked')) {
      el.show()
    }
  }
})

$("#hide_stories").on("change", function(e) {
  if($("#hide_stories").is(':checked')) {
    $(".story_stage").hide();
  } else {
    $(".story_stage").show();
  }
})
</script>