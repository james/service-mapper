<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var width = 960,
    height = 500;

var color = d3.scale.category20();

var force = d3.layout.force()
    .charge(-120)
    .linkDistance(30)
    .size([width, height]);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

d3.json("/graphs/index.json", function(error, graph) {
  var edges = [];

  graph.links.forEach(function(e) { 
      // Get the source and target nodes
      var sourceNode = graph.nodes.filter(function(n) { return n.id === e.source; })[0],
          targetNode = graph.nodes.filter(function(n) { return n.id === e.target; })[0];

      // Add the edge to the array
      edges.push({source: sourceNode, target: targetNode});
  });

  force
      .nodes(graph.nodes)
      .links(edges)
      .start();

  var link = svg.selectAll(".link")
      .data(edges)
    .enter().append("line")
      .attr("class", "link")
      .style("stroke-width", 2)
      .style("stroke", "green");

  var node = svg.selectAll(".node")
      .data(graph.nodes)
    .enter().append("g")
      .attr("class", "node")
      .call(force.drag);

  node.append("circle")
      .style("fill", function(d) { if(d.type == 'system') { return 'blue' } else { return 'black' }; })
      .attr("r", 5)


  node.append("text")
      .attr("dx", 12)
      .attr("dy", ".35em")
      .text(function(d) { return d.name; });

  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
  });
});

</script>